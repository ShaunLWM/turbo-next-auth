/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as protectedIndexImport } from './routes/(protected)/index'
import { Route as publicLoginIndexImport } from './routes/(public)/login/index'

// Create/Update Routes

const protectedIndexRoute = protectedIndexImport.update({
  id: '/(protected)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const publicLoginIndexRoute = publicLoginIndexImport.update({
  id: '/(public)/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)/': {
      id: '/(protected)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedIndexImport
      parentRoute: typeof rootRoute
    }
    '/(public)/login/': {
      id: '/(public)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicLoginIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof protectedIndexRoute
  '/login': typeof publicLoginIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof protectedIndexRoute
  '/login': typeof publicLoginIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(protected)/': typeof protectedIndexRoute
  '/(public)/login/': typeof publicLoginIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login'
  id: '__root__' | '/(protected)/' | '/(public)/login/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  protectedIndexRoute: typeof protectedIndexRoute
  publicLoginIndexRoute: typeof publicLoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  protectedIndexRoute: protectedIndexRoute,
  publicLoginIndexRoute: publicLoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(protected)/",
        "/(public)/login/"
      ]
    },
    "/(protected)/": {
      "filePath": "(protected)/index.tsx"
    },
    "/(public)/login/": {
      "filePath": "(public)/login/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
